You are an expert software engineer. Execute the following requirement immediately. Do not ask questions, do not wait for confirmation. Read the requirement carefully and implement all changes to the codebase as specified.

REQUIREMENT TO EXECUTE NOW:

# build-faction-lore-and-achievements-gallery

## Description

Create a dedicated faction lore and achievements gallery that allows members to document faction history, major events, and member accomplishments. This feature includes a timeline view of faction events, an achievements/badges system for tracking member milestones, and a lore repository for faction backstory and documentation. Integrate with the existing faction detail view and provide filtering and search capabilities for easy navigation through faction history.

## Implementation Steps

1. Create new types in src/app/types/Faction.ts: FactionEvent (id, faction_id, title, description, date, event_type, created_by), FactionAchievement (id, faction_id, title, description, icon_url, earned_date, members), and FactionLore (id, faction_id, title, content, category, created_at, updated_by)
2. Create src/app/features/characters/sub_CharFactions/FactionLoreGallery.tsx component with three main sections: Timeline (chronological faction events with Framer Motion animations), Achievements (badge grid showing faction-wide accomplishments), and Lore (searchable lore entries with category filtering)
3. Create src/app/features/characters/sub_CharFactions/TimelineView.tsx sub-component displaying faction events in vertical timeline format with event icons, dates, descriptions, and expandable details. Use Framer Motion for smooth scroll animations and staggered entry of timeline items.
4. Create src/app/features/characters/sub_CharFactions/AchievementBadges.tsx sub-component showing faction achievements in a grid layout with badge icons, achievement names, descriptions, and date earned. Include hover states revealing member names who earned the achievement.
5. Create src/app/features/characters/sub_CharFactions/LoreRepository.tsx sub-component with searchable lore entries organized by category (history, culture, conflicts, notable-figures), markdown support for rich content, and edit/add buttons for faction leaders
6. Add faction lore API hooks to src/app/api/factions.ts: `useFactionEvents(factionId)`, `useFactionAchievements(factionId)`, `useFactionLore(factionId)`, and mutation hooks for creating/updating entries with proper permission checks
7. Integrate FactionLoreGallery into FactionDetails.tsx as a new 'History & Achievements' tab with smooth tab transitions, positioned after the Branding tab to showcase faction narrative and accomplishments

## Files to Modify

- src/app/types/Faction.ts
- src/app/features/characters/sub_CharFactions/FactionLoreGallery.tsx
- src/app/features/characters/sub_CharFactions/TimelineView.tsx
- src/app/features/characters/sub_CharFactions/AchievementBadges.tsx
- src/app/features/characters/sub_CharFactions/LoreRepository.tsx
- src/app/features/characters/sub_CharFactions/FactionDetails.tsx
- src/app/api/factions.ts
- db/mockData.ts

## UI/UX Innovation Experiment

Implement an animated timeline with interactive nodes that expand on hover to show event details in a floating card. Add particle effects around achievement badges when they enter view. Create a 'lore scroll' effect for the repository where entries appear as if being written in real-time with a typewriter animation. Include a 'faction story mode' that plays through major events sequentially with narration-style transitions between timeline events.

## Update FILE_STRUCTURE.MD

IMPORTANT: After implementing the changes, update the FILE_STRUCTURE.MD file in the context directory to reflect the latest changes.

Include:
1. New files created or modified
2. Updated component relationships
3. New patterns or architectural decisions

At the end of FILE_STRUCTURE.MD, add a "## Next Steps" section with your recommendation for the next goal or feature to implement based on the current progress.

## Recommended Next Goal

After completing the lore gallery, implement a faction export feature that generates beautiful PDF or shareable HTML documents containing the faction's complete branding, media gallery, timeline, achievements, and lore. This creates value for users wanting to document their faction's story and prepares for future sharing and collaboration features.



IMPORTANT INSTRUCTIONS:
- Analyze the requirement thoroughly
- Identify all files that need to be modified or created
- Implement all changes specified in the requirement
- Follow the implementation steps precisely
- Create/modify files as needed
- Run any tests if specified
- Ensure all changes are complete before finishing

## Context Reference Updates

After implementing changes, if the requirement references a specific CONTEXT (feature group), update the context documentation:

1. Look for `.context` files in the project that match the feature being implemented
2. Update the context file with:
   - New files created
   - Modified components
   - Updated functionality
   - New patterns introduced

Example: If working on "authentication" feature, update `contexts/authentication/.context` with the changes.

## File Structure Guidelines (Next.js/React Projects)

When creating new files in Next.js/React projects, follow this structure:

**Feature-Specific Files** (use `app/features/<feature>` structure):
- `app/features/<feature>/components/` - Feature-specific components and UI sections
- `app/features/<feature>/lib/` - Feature-specific functions, utilities, and logical helpers
- `app/features/<feature>/` - Main wrapper, index, or page file for the feature

**Reusable UI Components** (use `app/components/ui` structure):
- `app/components/ui/` - Shared, reusable UI elements used across multiple features

**Theming and Styling**:
- Before creating new UI components, examine existing components in the project
- Match the color scheme, spacing, and visual patterns of existing components
- Use consistent className patterns (Tailwind CSS classes)
- Follow the app's design language (glassmorphism, gradients, shadows, etc.)
- Pay attention to dark mode support if the app uses it

Examples:
- Feature component: `app/features/tasks/components/TaskCard.tsx`
- Feature helper: `app/features/tasks/lib/taskValidation.ts`
- Reusable UI: `app/components/ui/Button.tsx`

## Implementation Logging

**CRITICAL**: After completing the implementation, create a log entry in the SQLite database to track what was implemented.

Database Path: `C:\Users\kazda\kiro\story\database\goals.db`
Table: `implementation_log`
Project ID: `dd11e61e-f267-4e52-95c5-421b1ed9567b`

Execute this SQL command after implementation (replace placeholders with actual values):

```sql
INSERT INTO implementation_log (
  id,
  project_id,
  requirement_name,
  title,
  overview,
  tested,
  created_at
) VALUES (
  '<generate-unique-uuid>',
  'dd11e61e-f267-4e52-95c5-421b1ed9567b',
  '<requirement-name>',
  '<short-descriptive-title>',
  '<detailed-overview-of-changes>',
  0,
  datetime('now')
);
```

**Log Entry Guidelines**:
- `id`: Generate a unique UUID (e.g., using `crypto.randomUUID()` or similar)
- `project_id`: The project identifier (use: "dd11e61e-f267-4e52-95c5-421b1ed9567b")
- `requirement_name`: Name of the requirement file being executed
- `title`: Short, descriptive title (2-6 words, e.g., "Add User Authentication")
- `overview`: Detailed paragraph describing:
  - What was implemented
  - Key files created or modified
  - Major functionality added
  - Any important patterns or decisions made
- `tested`: Always set to 0 (false) initially
- `created_at`: Use `datetime('now')` for current timestamp

**Example Log Entry**:

```sql
INSERT INTO implementation_log (
  id,
  project_id,
  requirement_name,
  title,
  overview,
  tested,
  created_at
) VALUES (
  '550e8400-e29b-41d4-a716-446655440000',
  'project-abc-123',
  'implement-user-login',
  'User Login System',
  'Implemented complete user authentication system with login form, JWT token management, and session persistence. Created LoginForm.tsx component, authService.ts for API calls, and useAuth hook for state management. Added protected route wrapper and login/logout functionality. Integrated with existing theme using glassmorphism design.',
  0,
  datetime('now')
);
```

**How to Execute the SQL**:
Use the sqlite3 command-line tool or Node.js better-sqlite3 library:

```bash
sqlite3 "C:\Users\kazda\kiro\story\database\goals.db" "INSERT INTO implementation_log (...) VALUES (...);"
```

Or in Node.js/TypeScript:
```typescript
import Database from 'better-sqlite3';
const db = new Database('C:\Users\kazda\kiro\story\database\goals.db');
db.prepare(`
  INSERT INTO implementation_log (id, project_id, requirement_name, title, overview, tested, created_at)
  VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
`).run(id, projectId, requirementName, title, overview, 0);
db.close();
```

## Final Checklist

Before finishing:
- [ ] All code changes implemented
- [ ] Context documentation updated (if applicable)
- [ ] File structure follows guidelines
- [ ] UI components match existing theme
- [ ] Implementation log entry created in database
- [ ] Tests run successfully (if specified)

Begin implementation now.