You are an expert software engineer. Execute the following requirement immediately. Do not ask questions, do not wait for confirmation. Read the requirement carefully and implement all changes to the codebase as specified.

REQUIREMENT TO EXECUTE NOW:

# implement-faction-media-gallery-system

## Description

Create a comprehensive faction media gallery system that allows faction leaders to upload and manage faction-specific media including logos, emblems, banners, and screenshots. This feature extends the existing Faction type to include media metadata and creates a new gallery component that displays media in a grid layout with filtering by media type. Implement file upload handling using the existing project patterns and integrate with the faction detail view to showcase faction branding assets.

## Implementation Steps

1. Extend the Faction interface in src/app/types/Faction.ts to include media array: add `media?: FactionMedia[]` field and create new FactionMedia interface with fields: id, faction_id, type (logo|banner|emblem|screenshot|lore), url, uploaded_at, uploader_id, description
2. Create src/app/features/characters/sub_CharFactions/FactionMediaGallery.tsx component that displays media in a responsive grid using Framer Motion with staggered animations, includes filter tabs for media types, and shows upload button for faction leaders
3. Create src/app/features/characters/sub_CharFactions/MediaUploadForm.tsx modal component that handles file uploads with drag-and-drop support, file type validation (images, documents), size limits, and progress indication using existing UI patterns
4. Add faction media API hooks to src/app/api/factions.ts: `useFactionMedia(factionId)` to fetch media, `uploadFactionMedia(factionId, file, type)` for uploads, and `deleteFactionMedia(mediaId)` for removal with proper error handling
5. Integrate FactionMediaGallery into FactionDetails.tsx component in a new tab section alongside existing faction information, positioned after the members list with smooth tab transitions
6. Update mock data in db/mockData.ts to include sample faction media for testing gallery display and filtering functionality
7. Add media management permissions check in FactionDetails.tsx to show upload button only for faction leaders, using existing permission patterns from the codebase

## Files to Modify

- src/app/types/Faction.ts
- src/app/features/characters/sub_CharFactions/FactionMediaGallery.tsx
- src/app/features/characters/sub_CharFactions/MediaUploadForm.tsx
- src/app/features/characters/sub_CharFactions/FactionDetails.tsx
- src/app/api/factions.ts
- db/mockData.ts

## UI/UX Innovation Experiment

Implement an animated media grid with glass-morphism effect on hover, showing media details (type, uploader, upload date) in a translucent overlay. Add a 'featured media' spotlight section at the top that showcases the faction logo with a subtle parallax effect when scrolling. Include smooth fade-in animations as media loads and a skeleton loader matching the grid layout.

## Update FILE_STRUCTURE.MD

IMPORTANT: After implementing the changes, update the FILE_STRUCTURE.MD file in the context directory to reflect the latest changes.

Include:
1. New files created or modified
2. Updated component relationships
3. New patterns or architectural decisions

At the end of FILE_STRUCTURE.MD, add a "## Next Steps" section with your recommendation for the next goal or feature to implement based on the current progress.

## Recommended Next Goal

After completing the media gallery, implement faction color scheme customization where leaders can define primary and secondary colors that automatically apply to faction cards, member profiles, and emblem backgrounds. This creates visual cohesion and prepares for the premium theming monetization feature.



IMPORTANT INSTRUCTIONS:
- Analyze the requirement thoroughly
- Identify all files that need to be modified or created
- Implement all changes specified in the requirement
- Follow the implementation steps precisely
- Create/modify files as needed
- Run any tests if specified
- Ensure all changes are complete before finishing

## Context Reference Updates

After implementing changes, if the requirement references a specific CONTEXT (feature group), update the context documentation:

1. Look for `.context` files in the project that match the feature being implemented
2. Update the context file with:
   - New files created
   - Modified components
   - Updated functionality
   - New patterns introduced

Example: If working on "authentication" feature, update `contexts/authentication/.context` with the changes.

## File Structure Guidelines (Next.js/React Projects)

When creating new files in Next.js/React projects, follow this structure:

**Feature-Specific Files** (use `app/features/<feature>` structure):
- `app/features/<feature>/components/` - Feature-specific components and UI sections
- `app/features/<feature>/lib/` - Feature-specific functions, utilities, and logical helpers
- `app/features/<feature>/` - Main wrapper, index, or page file for the feature

**Reusable UI Components** (use `app/components/ui` structure):
- `app/components/ui/` - Shared, reusable UI elements used across multiple features

**Theming and Styling**:
- Before creating new UI components, examine existing components in the project
- Match the color scheme, spacing, and visual patterns of existing components
- Use consistent className patterns (Tailwind CSS classes)
- Follow the app's design language (glassmorphism, gradients, shadows, etc.)
- Pay attention to dark mode support if the app uses it

Examples:
- Feature component: `app/features/tasks/components/TaskCard.tsx`
- Feature helper: `app/features/tasks/lib/taskValidation.ts`
- Reusable UI: `app/components/ui/Button.tsx`

## Implementation Logging

**CRITICAL**: After completing the implementation, create a log entry in the SQLite database to track what was implemented.

Database Path: `C:\Users\kazda\kiro\story\database\goals.db`
Table: `implementation_log`
Project ID: `dd11e61e-f267-4e52-95c5-421b1ed9567b`

Execute this SQL command after implementation (replace placeholders with actual values):

```sql
INSERT INTO implementation_log (
  id,
  project_id,
  requirement_name,
  title,
  overview,
  tested,
  created_at
) VALUES (
  '<generate-unique-uuid>',
  'dd11e61e-f267-4e52-95c5-421b1ed9567b',
  '<requirement-name>',
  '<short-descriptive-title>',
  '<detailed-overview-of-changes>',
  0,
  datetime('now')
);
```

**Log Entry Guidelines**:
- `id`: Generate a unique UUID (e.g., using `crypto.randomUUID()` or similar)
- `project_id`: The project identifier (use: "dd11e61e-f267-4e52-95c5-421b1ed9567b")
- `requirement_name`: Name of the requirement file being executed
- `title`: Short, descriptive title (2-6 words, e.g., "Add User Authentication")
- `overview`: Detailed paragraph describing:
  - What was implemented
  - Key files created or modified
  - Major functionality added
  - Any important patterns or decisions made
- `tested`: Always set to 0 (false) initially
- `created_at`: Use `datetime('now')` for current timestamp

**Example Log Entry**:

```sql
INSERT INTO implementation_log (
  id,
  project_id,
  requirement_name,
  title,
  overview,
  tested,
  created_at
) VALUES (
  '550e8400-e29b-41d4-a716-446655440000',
  'project-abc-123',
  'implement-user-login',
  'User Login System',
  'Implemented complete user authentication system with login form, JWT token management, and session persistence. Created LoginForm.tsx component, authService.ts for API calls, and useAuth hook for state management. Added protected route wrapper and login/logout functionality. Integrated with existing theme using glassmorphism design.',
  0,
  datetime('now')
);
```

**How to Execute the SQL**:
Use the sqlite3 command-line tool or Node.js better-sqlite3 library:

```bash
sqlite3 "C:\Users\kazda\kiro\story\database\goals.db" "INSERT INTO implementation_log (...) VALUES (...);"
```

Or in Node.js/TypeScript:
```typescript
import Database from 'better-sqlite3';
const db = new Database('C:\Users\kazda\kiro\story\database\goals.db');
db.prepare(`
  INSERT INTO implementation_log (id, project_id, requirement_name, title, overview, tested, created_at)
  VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
`).run(id, projectId, requirementName, title, overview, 0);
db.close();
```

## Final Checklist

Before finishing:
- [ ] All code changes implemented
- [ ] Context documentation updated (if applicable)
- [ ] File structure follows guidelines
- [ ] UI components match existing theme
- [ ] Implementation log entry created in database
- [ ] Tests run successfully (if specified)

Begin implementation now.